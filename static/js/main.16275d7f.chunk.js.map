{"version":3,"sources":["assests/style.module.css","container/Main.js","component/Spinner.js","component/RecipeCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","Spinner","className","classes","loader","RecipeCard","props","ingredients","map","ige","index","key","recipeCard","src","imageSource","recipeImage","recipeName","href","recipeLink","api_key","Recipe","Main","state","RecipeData","loading","input","exist","getRecipe","setState","axios","get","then","response","data","more","hits","catch","err","console","log","inputChangeHandler","e","target","value","this","recipe","image","label","ingredientLines","container","type","searchField","placeholder","onChange","event","searchButton","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qIACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,YAAc,2BAA2B,aAAe,4BAA4B,WAAa,0BAA0B,YAAc,2BAA2B,OAAS,sBAAsB,MAAQ,uB,qFCM9PC,E,gHCFWC,EAFC,kBAAO,yBAAKC,UAAWC,IAAQC,QAAxB,eCeRC,EAfI,SAAAC,GACf,IAAMC,EAAcD,EAAMC,YAAYC,KAAI,SAACC,EAAIC,GAC3C,OAAO,wBAAIC,IAAKD,GAAQD,MAE5B,OACI,yBAAKP,UAAWC,IAAQS,YACpB,yBAAKC,IAAKP,EAAMQ,YAAaZ,UAAWC,IAAQY,cAChD,4BAAKT,EAAMU,YACX,2CACA,4BAAKT,GACL,gDAAqB,uBAAGU,KAAMX,EAAMY,YAAf,iBFP3BC,EAAU,mCAEZC,EAAQ,KAkEGC,E,4MAhEXC,MAAM,CACFC,WAAW,KACXC,SAAQ,EACRC,MAAM,GACNC,OAAM,G,EAEV1B,I,yDAXW,W,oBAW8DmB,G,EAIzEQ,UAAU,WACN,EAAKC,SAAS,CAACJ,SAAQ,EAAKC,MAAM,KAClCzB,EAAG,0CAAqC,EAAKsB,MAAMG,MAAhD,mBAjBI,WAiBJ,oBAAkFN,GACrFU,IAAMC,IAAI9B,GAAK+B,MAAK,SAAAC,GACZA,EAASC,KAAKC,KACd,EAAKN,SAAS,CAACJ,SAAQ,EAAME,MAAMM,EAASC,KAAKC,KAAKX,WAAWS,EAASC,KAAKE,OAE/E,EAAKP,SAAS,CAACJ,SAAQ,EAAME,MAAMM,EAASC,KAAKC,UAIxDE,OAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZ,EAAKT,SAAS,CAACJ,SAAQ,Q,EAI/BgB,mBAAqB,SAACC,GAClB,EAAKb,SAAS,CAACH,MAAMgB,EAAEC,OAAOC,S,mEApB/BL,QAAQC,IAAIK,KAAKtB,MAAMI,S,+BAsBf,IAAD,OAsBN,OArBIkB,KAAKtB,MAAMI,QACXN,EAAS,mDAERwB,KAAKtB,MAAMI,QACZN,EAAS,gEAGTwB,KAAKtB,MAAMC,aACXH,EAASwB,KAAKtB,MAAMC,WAAWf,KAAI,SAACqC,EAAOnC,GACvC,OAAO,kBAAC,EAAD,CACPC,IAAKD,EACLI,YAAa+B,EAAOA,OAAOC,MAC3B9B,WAAY6B,EAAOA,OAAOE,MAC1B7B,WAAY2B,EAAOA,OAAO7C,IAC1BO,YAAasC,EAAOA,OAAOG,sBAG/BJ,KAAKtB,MAAME,UACXJ,EAAS,kBAAC,EAAD,OAIT,yBAAKlB,UAAWC,IAAQ8C,WACpB,2BAAOC,KAAK,OAAOhD,UAAWC,IAAQgD,YAAaR,MAAOC,KAAKtB,MAAMG,MAAO2B,YAAY,uCAAuCC,SAAU,SAACC,GAAD,OAAS,EAAKd,mBAAmBc,MAC1K,4BAAQpD,UAAWC,IAAQoD,aAAcC,QAASZ,KAAKjB,WAAvD,UAEIP,O,GA1DDqC,aGEJC,EARH,WACV,OACE,yBAAKxD,UAAU,OACX,kBAAC,EAAD,QCMYyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.16275d7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__vTB7F\",\"searchField\":\"style_searchField__313ED\",\"searchButton\":\"style_searchButton__3GGLV\",\"recipeCard\":\"style_recipeCard__cs5D-\",\"recipeImage\":\"style_recipeImage__3tgKl\",\"loader\":\"style_loader__aAHu3\",\"load1\":\"style_load1__1Z1ws\"};","import React,{ Component } from 'react';\r\nimport axios from 'axios';\r\nimport classes from \"../assests/style.module.css\";\r\nimport Spinner from '../component/Spinner.js';\r\nimport RecipeCard from '../component/RecipeCard.js';\r\nconst app_id = 'c44a168d';\r\nconst api_key = 'c95217b9cb9eec97e6a5f3dedbf57f60';\r\nlet url ; \r\nlet Recipe =null;\r\nclass Main extends Component {\r\n    state={\r\n        RecipeData:null,\r\n        loading:false,\r\n        input:'',\r\n        exist:true\r\n    }\r\n    url =`https://api.edamam.com/search?q=chicken&app_id=${app_id}&app_key=${api_key}`;\r\n   componentDidUpdate(){\r\n       console.log(this.state.exist)\r\n   }\r\n    getRecipe=()=>{\r\n        this.setState({loading:true,input:''});\r\n        url =`https://api.edamam.com/search?q=${this.state.input}&app_id=${app_id}&app_key=${api_key}`;\r\n        axios.get(url).then(response => {\r\n            if (response.data.more){\r\n                this.setState({loading:false,exist:response.data.more,RecipeData:response.data.hits});\r\n            } else {\r\n                this.setState({loading:false,exist:response.data.more});\r\n            }\r\n            \r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            this.setState({loading:false});\r\n        })\r\n\r\n    }\r\n    inputChangeHandler = (e) => {\r\n        this.setState({input:e.target.value})\r\n    }\r\n    render () {\r\n        if (this.state.exist){\r\n            Recipe = <h1>Search for Recipes</h1>;\r\n        }\r\n        if (!this.state.exist){\r\n            Recipe = <h1>No Result Found For this Search</h1>\r\n            \r\n        }\r\n        if (this.state.RecipeData){\r\n            Recipe = this.state.RecipeData.map((recipe,index) => {\r\n                return <RecipeCard\r\n                key={index}\r\n                imageSource={recipe.recipe.image}\r\n                recipeName={recipe.recipe.label}\r\n                recipeLink={recipe.recipe.url}\r\n                ingredients={recipe.recipe.ingredientLines}/>\r\n            })\r\n        }\r\n        if (this.state.loading){\r\n            Recipe = <Spinner/>\r\n        }\r\n        \r\n        return (\r\n            <div className={classes.container}>\r\n                <input type=\"text\" className={classes.searchField} value={this.state.input} placeholder=\"Please Search Some Delecious Recipes\" onChange={(event)=>this.inputChangeHandler(event)}/>\r\n                <button className={classes.searchButton} onClick={this.getRecipe}>Search</button>\r\n                {\r\n                    Recipe\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport classes from '../assests/style.module.css';\r\n\r\nconst Spinner = () => (<div className={classes.loader}>Loading...</div>)\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport classes from '../assests/style.module.css';\r\n\r\nconst RecipeCard = props => {\r\n    const ingredients = props.ingredients.map((ige,index) => {\r\n        return <li key={index}>{ige}</li>\r\n    })\r\n    return (\r\n        <div className={classes.recipeCard}>\r\n            <img src={props.imageSource} className={classes.recipeImage}/>\r\n            <h1>{props.recipeName}</h1>\r\n            <h4>Ingrediants</h4>\r\n            <ul>{ingredients}</ul>\r\n            <h4>For Full Recipe: <a href={props.recipeLink}>Click Here</a></h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RecipeCard;","import React from 'react';\nimport './App.css';\nimport Main from './container/Main.js';\nconst App = () => {\n  return (\n    <div className=\"App\">\n        <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}